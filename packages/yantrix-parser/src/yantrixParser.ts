/* eslint-disable */
// @ts-nocheck
/* eslint-disable */
// @ts-nocheck
import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import {ReservedList, ExpressionTypes} from './index.js';
  import {calcDepthFunc, maxNestedFuncLevel} from './grammar/jsGrammar.js';

  let counter = 0;

export class YantrixParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"start":3,"document":4,"EOF":5,"line":6,"statements":7,"NewLine":8,"PLUS":9,"INITIAL_STATE":10,"BY_PASS":11,"CONTEXT_STATEMENT":12,"EMIT_STATEMENT":13,"SUBSCRIBE_STATEMENT":14,"DEFINE_STATEMENT":15,"INJECT_STATEMENT":16,"EXPRESSION_STATEMENT":17,"CONTEXT_SYMBOL":18,"LEFT_BRACE":19,"RAW_KEYLIST":20,"RIGHT_BRACE":21,"LEFT_ARROW":22,"KEY_LIST":23,"EMIT_EVENT":24,"KEY_LIST_STATEMENT":25,"EMIT":26,"IDENT":27,"SUBSCRIBE_EVENT":28,"SUBSCRIBE":29,"DEFINE":30,"DEFINE_ARGUMENTS":31,"RIGHT_ARROW":32,"DEFINE_FUNCTION":33,"INJECT":34,"FUNCTION_NAME":35,"LEFT_BRACKET":36,"DEFINE_FUNCTION_ARGUMENTS":37,"RIGHT_BRACKET":38,"DEFINE_FUNCTION_VALUE":39,"IMMUTABLE":40,"CONSTANT":41,"EXPRESSION_DEFINE":42,"COMMA":43,"DEFINE_ARGUMENTS_TYPES":44,"ASSIGN":45,"EXPRESSION":46,"QUESTION_MARK":47,"KEY_ITEM":48,"DATA_OBJECT":49,"FUNCTION":50,"RAW_KEYITEM":51,"ARGUMENTS":52,"DATA_OBJECT_REFERENCE":53,"PAYLOAD_REFERENCE":54,"CONTEXT_REFERENCE":55,"CONSTANT_SYMBOL":56,"DOLLAR_SYMBOL":57,"ARRAY":58,"STRING":59,"NUMBER":60,"INTEGER":61,"DECIMAL":62,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"NewLine",9:"PLUS",10:"INITIAL_STATE",11:"BY_PASS",18:"CONTEXT_SYMBOL",19:"LEFT_BRACE",21:"RIGHT_BRACE",22:"LEFT_ARROW",26:"EMIT",27:"IDENT",29:"SUBSCRIBE",30:"DEFINE",32:"RIGHT_ARROW",34:"INJECT",35:"FUNCTION_NAME",36:"LEFT_BRACKET",38:"RIGHT_BRACKET",43:"COMMA",45:"ASSIGN",47:"QUESTION_MARK",56:"CONSTANT_SYMBOL",57:"DOLLAR_SYMBOL",58:"ARRAY",59:"STRING",61:"INTEGER",62:"DECIMAL"};
    productions_: ProductionsType = [0,[3,2],[4,0],[4,2],[6,1],[6,1],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,4],[12,6],[13,1],[13,2],[13,7],[24,2],[14,1],[14,2],[14,4],[28,3],[15,5],[16,2],[33,4],[33,3],[33,1],[39,1],[39,1],[37,1],[37,3],[42,1],[42,1],[42,1],[42,4],[42,3],[31,2],[31,3],[44,1],[44,3],[17,3],[25,3],[23,1],[23,3],[48,1],[48,1],[48,1],[20,1],[20,3],[51,1],[51,3],[50,4],[50,3],[52,1],[52,3],[49,3],[49,1],[46,1],[46,1],[46,1],[53,1],[53,1],[53,1],[41,2],[54,2],[55,2],[40,1],[40,1],[40,1],[60,1],[60,1]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {3:[2,1],76:[2,38],84:[2,50],93:[2,39]};

    constructor (yy = {}, lexer = new YantrixLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[5,8,9,18,26,29,30,34,45],$V1=[1,26],$V2=[1,46],$V3=[1,38],$V4=[1,44],$V5=[1,45],$V6=[1,34],$V7=[1,35],$V8=[1,39],$V9=[1,40],$Va=[1,51],$Vb=[5,8,9,18,21,26,29,30,34,38,43,45,47],$Vc=[5,8,9,18,26,29,30,34,36,45],$Vd=[21,43],$Ve=[5,8,9,18,26,29,30,34,38,45],$Vf=[5,8,9,18,26,29,30,34,38,43,45],$Vg=[38,43],$Vh=[1,108],$Vi=[1,109],$Vj=[1,111];
      const o = JisonParser.expandParseTable;
      this.table = [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:[1,6],9:[1,7],12:8,13:9,14:10,15:11,16:12,17:13,18:[1,14],24:15,26:[1,20],28:16,29:[1,21],30:[1,17],34:[1,18],45:[1,19]},{1:[2,1]},o($V0,[2,3]),o($V0,[2,4]),o($V0,[2,5]),{10:[1,22],11:[1,23]},o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),{19:[1,24]},o($V0,[2,16],{25:25,36:$V1}),o($V0,[2,20],{25:27,36:$V1}),{27:[1,28]},{27:[1,29]},{18:$V2,35:$V3,40:31,41:41,46:30,49:32,50:33,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},{27:[1,47]},{27:[1,48]},o($V0,[2,6]),o($V0,[2,7]),{20:49,27:$Va,51:50},o($V0,[2,17],{22:[1,52]}),{18:$V2,23:53,35:$V3,40:56,41:41,48:54,49:55,50:57,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},o($V0,[2,21],{22:[1,58]}),{31:59,36:[1,60]},o($V0,[2,25]),{47:[1,61]},o($Vb,[2,59]),o($Vb,[2,60]),o($Vb,[2,61]),o($Vb,[2,68]),o($Vb,[2,69]),o($Vb,[2,70]),o([5,8,9,18,21,26,29,30,34,38,43,47],[2,58],{45:[1,62]}),{36:[1,63]},o($Vb,[2,71]),o($Vb,[2,72]),o($Vb,[2,62]),o($Vb,[2,63]),o($Vb,[2,64]),{27:[1,64]},{27:[1,65]},{27:[1,66]},o($Vc,[2,19]),{27:[1,67]},{21:[1,68]},{21:[2,49],43:[1,69]},o($Vd,[2,51],{45:[1,70]}),{18:[1,71]},{38:[1,72]},o($Ve,[2,44],{43:[1,73]}),o($Vf,[2,46]),o($Vf,[2,47]),o($Vf,[2,48]),{25:74,36:$V1},{32:[1,75]},{27:[1,78],38:[1,76],44:77},o($V0,[2,42]),{18:$V2,35:$V3,40:31,41:41,46:79,49:32,50:33,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},{18:$V2,35:$V3,38:[1,81],40:31,41:41,46:82,49:32,50:33,52:80,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},o($Vb,[2,65]),o($Vb,[2,66]),o($Vb,[2,67]),o($Vc,[2,23]),o($V0,[2,14],{22:[1,83]}),{20:84,27:$Va,51:50},{18:$V2,35:$V3,40:31,41:41,46:85,49:32,50:33,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},{19:[1,86]},o([5,8,9,18,22,26,29,30,34,45],[2,43]),{18:$V2,23:87,35:$V3,40:56,41:41,48:54,49:55,50:57,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},o($V0,[2,22]),{33:88,35:[1,89],39:90,40:91,41:92,56:$V4,58:$V6,59:$V7,60:36,61:$V8,62:$V9},{32:[2,38]},{38:[1,93],43:[1,94]},o($Vg,[2,40]),o($Vb,[2,57]),{38:[1,95],43:[1,96]},o($Vb,[2,54]),o($Vg,[2,55]),{18:$V2,23:97,35:$V3,40:56,41:41,48:54,49:55,50:57,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},{21:[2,50]},o($Vd,[2,52]),{20:98,27:$Va,51:50},o($Ve,[2,45]),o($V0,[2,24]),{36:[1,99]},o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),{32:[2,39]},{27:[1,100]},o($Vb,[2,53]),{18:$V2,35:$V3,40:31,41:41,46:101,49:32,50:33,53:37,54:42,55:43,56:$V4,57:$V5,58:$V6,59:$V7,60:36,61:$V8,62:$V9},o($V0,[2,15]),{21:[1,102]},{27:$Vh,35:$Vi,37:103,38:[1,104],40:106,41:107,42:105,56:$V4,58:$V6,59:$V7,60:36,61:$V8,62:$V9},o($Vg,[2,41]),o($Vg,[2,56]),o($V0,[2,18]),{38:[1,110],43:$Vj},o($V0,[2,27]),o($Vg,[2,31]),o($Vg,[2,33]),o($Vg,[2,34]),o($Vg,[2,35]),{36:[1,112]},o($V0,[2,26]),{27:$Vh,35:$Vi,40:106,41:107,42:113,56:$V4,58:$V6,59:$V7,60:36,61:$V8,62:$V9},{27:$Vh,35:$Vi,37:114,38:[1,115],40:106,41:107,42:105,56:$V4,58:$V6,59:$V7,60:36,61:$V8,62:$V9},o($Vg,[2,32]),{38:[1,116],43:$Vj},o($Vg,[2,37]),o($Vg,[2,36])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$={defines:[], contextDescription:[],emit:[],subscribe:[],initialState:false,byPass:false, inject:[]}
break;
case 3:

           if($$[$0] !== '\n') {
              if($$[$0].hasOwnProperty('initialState')){
                $$[$0-1]['initialState'] = true
              }
              if($$[$0].hasOwnProperty('byPass')){
                $$[$0-1]['byPass'] = true
              }
              if($$[$0].hasOwnProperty('context'))  $$[$0-1]['contextDescription'].push($$[$0])
              if($$[$0].hasOwnProperty('emit')) $$[$0-1]['emit'].push($$[$0]['emit'])
              if($$[$0].hasOwnProperty('subscribe')) $$[$0-1]['subscribe'].push($$[$0]['subscribe'])
              if($$[$0].hasOwnProperty('define')) $$[$0-1]['defines'].push($$[$0]['define'])
              if($$[$0].hasOwnProperty('inject')) $$[$0-1]['inject'].push($$[$0]['inject'])
              if($$[$0].hasOwnProperty('expression')) { this.$ = $$[$0] }
           }
        
break;
case 6:
this.$ = {initialState:true}
break;
case 7:
this.$ = {byPass:true}
break;
case 11:
this.$ = {define:$$[$0]}
break;
case 12:
this.$ = {inject:$$[$0]}
break;
case 13:
this.$ = {expression: $$[$0]}
break;
case 14:
this.$ = {context:$$[$0-1]} 
break;
case 15:

                  if($$[$0].length > $$[$0-3].length) {
                        throw new Error('The number of arguments must be equal to or less than the number of context arguments.')}; this.$ = {context: $$[$0-3], reducer:$$[$0]}
break;
case 16:
this.$ = {emit:{...$$[$0]}}
break;
case 17:
 this.$ = {emit:{...$$[$0-1], meta:[...$$[$0]]}} 
break;
case 18:
 this.$ = {emit:{ ...$$[$0-6], meta: $$[$0-5], context:[...$$[$0-1]] }}
break;
case 19:
 this.$ = {identifier:$$[$0]}
break;
case 20:
 this.$ = {subscribe:$$[$0]}
break;
case 21:
 this.$ = {subscribe:{payload:$$[$0],...$$[$0-1]}}
break;
case 22:
 this.$ = {subscribe:{...$$[$0-3],meta:$$[$0], payload:$$[$0-2]}}
break;
case 23:
 this.$ = {identifier:$$[$0-1], actionName:$$[$0]}
break;
case 24:
this.$ = {identifier:$$[$0-3], ...$$[$0-2], expression:$$[$0]}
break;
case 25:
this.$ = {identifier:$$[$0]}
break;
case 26: case 36: case 53:
this.$ = { expressionType:ExpressionTypes.Function,FunctionDeclaration: { FunctionName:$$[$0-3], Arguments:[...$$[$0-1]]} } 
break;
case 27: case 37: case 54:
this.$ = { expressionType:ExpressionTypes.Function, FunctionDeclaration: { FunctionName:$$[$0-2], Arguments:[] } } 
break;
case 31: case 44: case 49: case 55:
this.$ = [$$[$0]]
break;
case 32: case 56:
 this.$ = [...$$[$0-2], $$[$0]] 
break;
case 35:
this.$ = {expressionType:ExpressionTypes.Identifier, identifier:$$[$0]}
break;
case 38:
this.$ = {Arguments:[]}
break;
case 39:
this.$ = {Arguments:[...$$[$0-1]]}
break;
case 40:
this.$ = $$[$0]
break;
case 41: case 45:
this.$ = [$$[$0-2]].concat($$[$0])
break;
case 42:
this.$ = $$[$0-1]
break;
case 43:
 this.$ = $$[$0-1]
break;
case 46:
this.$ = {keyItem:{...$$[$0]}}
break;
case 47: case 48:
this.$ = {keyItem:{expression:$$[$0]}}
break;
case 50:
this.$ =[$$[$0-2]].concat($$[$0])
break;
case 51:
this.$ = {keyItem:{identifier:$$[$0]}}
break;
case 52:
this.$ = {keyItem:{identifier: $$[$0-2],  expression: $$[$0]}}
break;
case 57:
 this.$ = {...$$[$0-2], expression:$$[$0]}
break;
case 61:
counter = Math.max(calcDepthFunc($$[$0]), counter);
                if(counter > maxNestedFuncLevel) {
                    counter = 0;
                    throw new Error('nested limit');
                }
break;
case 65:
this.$ = {expressionType:ExpressionTypes.Constant, identifier:$$[$0]}
break;
case 66:
 this.$ = {expressionType:ExpressionTypes.Payload, identifier: $$[$0] } 
break;
case 67:
this.$ = {expressionType:ExpressionTypes.Context, identifier:$$[$0] } 
break;
case 68:
this.$ = { ArrayDeclaration:[], expressionType:ExpressionTypes.ArrayDeclaration} 
break;
case 69:
this.$ = {StringDeclaration:$$[$0].toString(), expressionType:ExpressionTypes.StringDeclaration}
break;
case 71:
this.$ = { NumberDeclaration: Number($$[$0]), expressionType: ExpressionTypes.IntegerDeclaration} 
break;
case 72:
this.$ = { NumberDeclaration: Number($$[$0]), expressionType:ExpressionTypes.DecimalDeclaration} 
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class YantrixLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Yantrix"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:$)/i,
        /^(?:[\r\n]+)/i,
        /^(?:%%)/i,
        /^(?:[\s]+)/i,
        /^(?:[A-Za-z]{1,}[A-Za-z0-9\.]*(?=[(]))/i,
        /^(?:subscribe\/)/i,
        /^(?:emit\/)/i,
        /^(?:define\/)/i,
        /^(?:inject\/)/i,
        /^(?:\+Init\b)/i,
        /^(?:[a-zA-Z]\w{0,254})/i,
        /^(?:\+)/i,
        /^(?:\{)/i,
        /^(?:\})/i,
        /^(?:#)/i,
        /^(?:\$)/i,
        /^(?:,)/i,
        /^(?:\()/i,
        /^(?:<=)/i,
        /^(?:=>)/i,
        /^(?:=)/i,
        /^(?:\))/i,
        /^(?:\/)/i,
        /^(?:\?)/i,
        /^(?:'[^']+')/i,
        /^(?:"[^"]+")/i,
        /^(?:-?[0-9]+\.[0-9]+)/i,
        /^(?:-?[0-9]+)/i,
        /^(?:\[\])/i
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:return 5;
      break;
    case 1:return 8;
      break;
    case 2:return 56;
      break;
    case 3:/* skip all whitespace */
      break;
    case 4:return 35;
      break;
    case 5:return 29
      break;
    case 6:return 26
      break;
    case 7:return 30
      break;
    case 8:return 34
      break;
    case 9:return 10
      break;
    case 10:return 27
      break;
    case 11:return 9
      break;
    case 12:return 19
      break;
    case 13:return 21
      break;
    case 14:return 18
      break;
    case 15:return 57
      break;
    case 16:return 43
      break;
    case 17:return 36
      break;
    case 18:return 22
      break;
    case 19:return 32
      break;
    case 20:return 45
      break;
    case 21:return 38
      break;
    case 22:return 'FORWARD_SLASH'
      break;
    case 23:return 47
      break;
    case 24:yy_.yytext = yy_.yytext.slice(1,-1); return 59
      break;
    case 25:yy_.yytext = yy_.yytext.slice(1,-1); return 59
      break;
    case 26:return 62
      break;
    case 27:return 61
      break;
    case 28:return 58
      break;
        }
    }
}


